[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I grew up in Wellesley, MA and attended Wellesley High School, where I developed a strong interest in mathematics and the natural Sciences. Later, I pursued a double major in mathematics and physics at Bates College, while also exploring the exciting realm of computer science. Currently, I am working towards my PhD. at Virginia Tech, aiming to learn as much as possible and hone my problem solving skills."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Colby's Website",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nFluid Simulation\n\n\nPhysics\n\n\nPython\n\n\n\n\nFor my computational physics final, I utilized a physics engine to conduct fluid simulations.\n\n\n\n\n\n\nSep 16, 2023\n\n\n14 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nVirginia Tech | PhD in Statistics\nAug 2023 - Present\nBates College | BA in Mathematics & Physics\nAug 2019 - May 2023"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\nBates College | Astrophysics Research Assistant\nMay 2022 - Jul 2023\nBates College | Calculus Course Attached Tutor\nSep 2021 - Apr 2022\nFreelance | Python Programmer\nJun 2021 - Sep 2021\nDiamond Diagnostics | Engineering Intern\nJun 2017 - Aug 2017"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Sample Post",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use(\"ggplot\")\n\nx = np.linspace(-np.pi, np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y, label=r\"$\\sin(x)$\")\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$\\sin(x)$\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "index.html#recent-projects",
    "href": "index.html#recent-projects",
    "title": "Colby's Website",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nFluid Simulation\n\n\nPhysics\n\n\nPython\n\n\n\n\nFor my computational physics final, I utilized a physics engine to conduct fluid simulations.\n\n\n\n\n\n\nSep 16, 2023\n\n\n14 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html#this-is-a-header",
    "href": "posts/post-with-code/index.html#this-is-a-header",
    "title": "Sample Post",
    "section": "This is a header",
    "text": "This is a header\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use(\"ggplot\")\n\nx = np.linspace(-np.pi, np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y, label=r\"$\\sin(x)$\")\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$\\sin(x)$\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/index.html#here-is-another-header",
    "href": "posts/post-with-code/index.html#here-is-another-header",
    "title": "Sample Post",
    "section": "Here is another header",
    "text": "Here is another header"
  },
  {
    "objectID": "posts/post-with-code/index.html#this-is-a-subheader",
    "href": "posts/post-with-code/index.html#this-is-a-subheader",
    "title": "Sample Post",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use(\"ggplot\")\n\nx = np.linspace(-np.pi, np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y, label=r\"$\\sin(x)$\")\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$\\sin(x)$\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/index.html#this-is-another-subheader",
    "href": "posts/post-with-code/index.html#this-is-another-subheader",
    "title": "Sample Post",
    "section": "This is another subheader",
    "text": "This is another subheader"
  },
  {
    "objectID": "posts/fluid_sim/index.html",
    "href": "posts/fluid_sim/index.html",
    "title": "Fluid Simulations With PhiFlow",
    "section": "",
    "text": "During my undergraduate education at Bates College, one of my final classes was Computational Physics. In this course, we delved into various techniques and software packages to create comprehensive physics simulations. Among the many fascinating topics we covered, I found advection and diffusion particularly intriguing. These concepts revolve around the movement of particles through a field and how they gradually dissipate their energy across the entire system. The significance of these concepts became evident when we explored scenarios like the way temperature spreads to equalize disparities in a system. Later, I drew the connection about how crucial these ideas were in the context of fluid simulations, which ultimately planted a goal in the back of my mind. This goal, that I acted on by making it the subject of my final project, was to create and run my own fluid simulation.\nFrom the outset, I aimed to make my project versatile. I wanted users to be able to create a grid of empty space and populate it with objects that the fluid must navigate according to the simulation conditions. After extensive research, it became clear that “PhiFlow” was the most comprehensive library to accomplish this goal. PhiFlow is a Python library specifically designed for fluid dynamics simulations, offering a wide range of functions for efficiently computing the necessary mathematics and physics involved in the simulation process. As the project progressed, I discovered several ingenious techniques used by PhiFlow, which I’ll delve into later in this blog post.\nTo prepare myself for this project, I revisited our class notes and Jupyter notebooks, particularly those on 1D diffusion and advection. The transition to the two-dimensional analogue seemed straightforward conceptually but more computationally demanding. Armed with a grasp of the fundamentals and after thoroughly reading the user documentation PhiFlow provided, I embarked on my exciting journey into computational fluid dynamics."
  },
  {
    "objectID": "posts/fluid_sim/index.html#this-is-a-subheader",
    "href": "posts/fluid_sim/index.html#this-is-a-subheader",
    "title": "Fluid Simulations With PhiFlow",
    "section": "",
    "text": "# imports for visualizations\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom PIL import Image\nimport scipy\n\n# imports for physics\nfrom phi.jax.flow import *  # faster implementation of numpy\nfrom phi.physics.advect import rk4  # pre-existing rk4 ode solver\nfrom tqdm import tqdm  # visual progress bar\nfrom math import pi\n\n# set initial parameters\nN_TIME_STEPS = 50\nANGLE = 0 * pi\nMAGNITUDE = 3.0\nX_LEN = 100\nY_LEN = 100"
  },
  {
    "objectID": "posts/fluid_sim/index.html#new-header",
    "href": "posts/fluid_sim/index.html#new-header",
    "title": "Fluid Simulations With PhiFlow",
    "section": "",
    "text": "Using the PhiFlow package we can instantiate “StaggeredGrid”s to store the velocities of each discrete point in the simulation domain. These StaggeredGrids are tensors that store the velocities on each face of the grid as opposed to the centers. This allows for easier boundry condition problems. Additionally, we set the extropolation to be “BOUNDRY” which means we allow for velocities to flow in and out of the simulation instead of being contained inside the domain. Lastly we choose the dimension and resolution of the simulation domain.\n\n# make the velocity field\nX_SPEED = MAGNITUDE * math.cos(ANGLE)\nY_SPEED = MAGNITUDE * -math.sin(ANGLE)  # because axis is reversed\nvelocity = StaggeredGrid((X_SPEED, Y_SPEED), extrapolation.BOUNDARY, x=X_LEN, y=Y_LEN, bounds=Box(x=X_LEN, y=Y_LEN))\n\nNext we have to define the boundary of the simulation domain. Since we want the wind to come from the left and flow through the right side we set the edge of the right side to be at infinity. Similarly we set the extropolation, bounds, and resolution to all be the same as the velocity tensors.\n\n# add infinite boundary conditions and set pressure to 0\nBOUNDARY_MASK = StaggeredGrid(Box(x=(-INF, 0.5), y=None), velocity.extrapolation, velocity.bounds, velocity.resolution)\npressure = None\n\nThe simulation that we run in PhiFlow takes in a list of objects that define the coordinates of where objects are located. These objects are what the simulation flows around and applys boundary conditions when advecting. We will later make more complicated object arrays as we try to make more complex simulations. In this case we create a list with an “Obstacle” object that is a predefined class that defines these boundry conditions. The benefit of using an obstacle like this is there is pre-existing geometries such as a cylinder where you can define an x and y coordinate with a radius. Again later on, we will build this up to make more complicated objects of rectangles.\n\nOBJECTS = [Obstacle(geom.infinite_cylinder(x=20, y=50, radius=10, inf_dim=None))]\n\nThis is our stepping function that we will use to move from one period of time to another. We advect the system using a small dt and the rk4 integrator to get a new velocity field. In this case the semi-lagrangian is used instead of the typical laplacian to handel these boundary conditions. We would quickly run into an error along the objects if we advected normally. Thus we are looking specifically at particles that are not going to cross the boundries and advect those. Other particle velocities are set to 0. Next we apply the boundry conditions around the outside of the simulation. By multiplying the velocity by our boundry mask. Lastly we diffuse the velocities using the function “make_incompressible”. Again we input the velocites and objects so that we know where we can and cannot diffuse the velocities. We do this with a small diffusion constant which is part of the Solve() method.\n\n@jit_compile\ndef step(v, p, dt=1.0):\n    v = advect.semi_lagrangian(v, v, dt, integrator=rk4)\n    v = v * (1 - BOUNDARY_MASK) + BOUNDARY_MASK * (X_SPEED, Y_SPEED)\n    return fluid.make_incompressible(v, OBJECTS, Solve('auto', 1e-5, 0, x0=p))\n\nNext we create a function to plot the vorticities (the curl of the vector field) so we can visualize the simulation. To do this we take in the velocity field the array of the object locations. We also in the future will change this function to allow us to plot multiple things via subplots and we set these up now for later implimentation.\n\ndef plot_vorticity(v_field, objects_arr, fig, axs, subplot):\n    \"\"\"\n    Function to help visualize the vorticity\n    \"\"\"\n    \n    # calculate the vorticity\n    vorticity = field.curl(v_field)\n    vort_field = vorticity.values.numpy(\"y,x\")\n\n    # setup the background foreground and mask\n    background = Image.fromarray(cm.bwr(vort_field, bytes=True, alpha=0))  # set background image\n\n    # populate the plot\n    axs.imshow(-1 * vort_field, cmap='bwr', clim=(-3, 3), origin='lower')  # b/c image is flipped\n\n    # style the plot\n    axs.get_xaxis().set_visible(False)\n    axs.get_yaxis().set_visible(False)\n    axs.set_aspect('equal')\n    axs.invert_yaxis()\n\nNow we use all of the functions and code we previously defined to run the simulation. We run through the time steps calculating the velocities and pressures as we go. At each point we calculate the voriticity and then display the results. I was unable to make a gif generate and so currently it just displays all the figures.\n\nfor _ in range(N_TIME_STEPS):\n    # use step function to get updated velocity and pressure\n    velocity, pressure = step(velocity, pressure)\n\n    # plot final figure\n    if _ == N_TIME_STEPS-1:\n      fig, axs = plt.subplots(1, 1, figsize=(5, 5))\n      \n      # populate figure\n      plot_vorticity(velocity, np.zeros((X_LEN, Y_LEN)), fig, axs, 0)\n      \n      # style the figure\n      plt.suptitle(f'Vorticity Simulation Results ({_+1} / {N_TIME_STEPS}) ')\n      plt.tight_layout()\n      plt.draw()\n      plt.pause(0.01)\n  \n      # clear image\n      plt.close()\n      \n    # otherwise pass\n    else:\n      pass\n\n\n\n\nThe vorticity is a pretty common way to visualize fluid flows but I am also curious about the actual velocity of wind moving around this surface. This is pretty easy to do as we already have the velocity field in an array and just need to combine the x-velocity and y-velocity to a singlel quantity that can be plotted. Using Pythagoreans theorem I define the “absolute velocity” to be the quadrature of the two velocities. The code to plot this as a function is as follows,\n\ndef plot_velocity(v_field, objects_arr, fig, axs, subplot):\n    \"\"\"\n    Function to help visualize the vorticity\n    \"\"\"\n    \n    # calculate the velocity\n    cen_velocity = v_field.at_centers()\n    abs_vel = (cen_velocity[0].values.numpy('y,x') ** 2 + cen_velocity[1].values.numpy('y,x') ** 2) ** 0.5\n\n    # setup the background foreground and mask\n    background = Image.fromarray(cm.Reds(abs_vel, bytes=True, alpha=0))  # set background image\n\n    # populate the plot\n    axs.imshow(abs_vel, cmap='Reds', clim=(0, math.sqrt(2) * MAGNITUDE), origin='lower')\n\n    # style the plot\n    axs.get_xaxis().set_visible(False)\n    axs.get_yaxis().set_visible(False)\n    axs.set_aspect('equal')\n    axs.invert_yaxis()\n\n\nfor _ in range(N_TIME_STEPS):\n    # use step function to get updated velocity and pressure\n    velocity, pressure = step(velocity, pressure)\n\n    # plot final result\n    if _ == N_TIME_STEPS-1:\n      fig, axs = plt.subplots(1, 1, figsize=(5, 5))\n      \n      # populate figure\n      plot_velocity(velocity, np.zeros((X_LEN, Y_LEN)), fig, axs, 0)\n      \n      # style the figure\n      plt.suptitle(f'Absolute Velocity Simulation Results ({_+1} / {N_TIME_STEPS})')\n      plt.tight_layout()\n      plt.draw()\n      plt.pause(0.01)\n  \n      # clear image\n      plt.close()\n      \n    # otherwise pass\n    else:\n      pass"
  },
  {
    "objectID": "posts/fluid_sim/index.html#importing-required-packages",
    "href": "posts/fluid_sim/index.html#importing-required-packages",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Importing required packages",
    "text": "Importing required packages\nSurprisingly, the code requires only a few packages to be installed to get started and experiment with it on your own. While each of these libraries downloads a range of version-specific additional packages for actual execution, the setup process is relatively painless.\n\n# imports for visualizations\nfrom matplotlib.animation import FuncAnimation\nimport matplotlib.pyplot as plt\n\n# imports for physics\nfrom phi.physics.advect import rk4  # pre-existing rk4 ode solver\nfrom phi.jax.flow import *  # faster implementation of numpy"
  },
  {
    "objectID": "posts/fluid_sim/index.html#problem-set-up",
    "href": "posts/fluid_sim/index.html#problem-set-up",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Problem Set Up",
    "text": "Problem Set Up\nUsing the PhiFlow package we can instantiate “StaggeredGrid”s to store the velocities of each discrete point in the simulation domain. These StaggeredGrids are tensors that store the velocities on each face of the grid as opposed to the centers. This allows for easier boundry condition problems. Additionally, we set the extropolation to be “BOUNDRY” which means we allow for velocities to flow in and out of the simulation instead of being contained inside the domain. Lastly we choose the dimension and resolution of the simulation domain.\n\n# make the velocity field\nX_SPEED = MAGNITUDE * math.cos(ANGLE)\nY_SPEED = MAGNITUDE * -math.sin(ANGLE)  # because axis is reversed\nvelocity = StaggeredGrid((X_SPEED, Y_SPEED), extrapolation.BOUNDARY, x=X_LEN, y=Y_LEN, bounds=Box(x=X_LEN, y=Y_LEN))\n\nNext we have to define the boundary of the simulation domain. Since we want the wind to come from the left and flow through the right side we set the edge of the right side to be at infinity. Similarly we set the extropolation, bounds, and resolution to all be the same as the velocity tensors.\n\n# add infinite boundary conditions and set pressure to 0\nBOUNDARY_MASK = StaggeredGrid(Box(x=(-INF, 0.5), y=None), velocity.extrapolation, velocity.bounds, velocity.resolution)\npressure = None"
  },
  {
    "objectID": "posts/fluid_sim/index.html#vorticity",
    "href": "posts/fluid_sim/index.html#vorticity",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Vorticity",
    "text": "Vorticity\nNext we create a function to plot the vorticities (the curl of the vector field) so we can visualize the simulation. To do this we take in the velocity field the array of the object locations. We also in the future will change this function to allow us to plot multiple things via subplots and we set these up now for later implimentation.\n\ndef plot_vorticity(v_field, objects_arr, fig, axs, subplot):\n    \"\"\"\n    Function to help visualize the vorticity\n    \"\"\"\n    \n    # calculate the vorticity\n    vorticity = field.curl(v_field)\n    vort_field = vorticity.values.numpy(\"y,x\")\n\n    # setup the background foreground and mask\n    background = Image.fromarray(cm.bwr(vort_field, bytes=True, alpha=0))  # set background image\n\n    # populate the plot\n    axs.imshow(-1 * vort_field, cmap='bwr', clim=(-3, 3), origin='lower')  # b/c image is flipped\n\n    # style the plot\n    axs.get_xaxis().set_visible(False)\n    axs.get_yaxis().set_visible(False)\n    axs.set_aspect('equal')\n    axs.invert_yaxis()\n\nNow we use all of the functions and code we previously defined to run the simulation. We run through the time steps calculating the velocities and pressures as we go. At each point we calculate the voriticity and then display the results. I was unable to make a gif generate and so currently it just displays all the figures."
  },
  {
    "objectID": "posts/fluid_sim/index.html#magnitude",
    "href": "posts/fluid_sim/index.html#magnitude",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Magnitude",
    "text": "Magnitude\nThe vorticity is a pretty common way to visualize fluid flows but I am also curious about the actual velocity of wind moving around this surface. This is pretty easy to do as we already have the velocity field in an array and just need to combine the x-velocity and y-velocity to a singlel quantity that can be plotted. Using Pythagoreans theorem I define the “absolute velocity” to be the quadrature of the two velocities. The code to plot this as a function is as follows,\n\ndef plot_velocity(v_field, objects_arr, fig, axs, subplot):\n    \"\"\"\n    Function to help visualize the vorticity\n    \"\"\"\n    \n    # calculate the velocity\n    cen_velocity = v_field.at_centers()\n    abs_vel = (cen_velocity[0].values.numpy('y,x') ** 2 + cen_velocity[1].values.numpy('y,x') ** 2) ** 0.5\n\n    # setup the background foreground and mask\n    background = Image.fromarray(cm.Reds(abs_vel, bytes=True, alpha=0))  # set background image\n\n    # populate the plot\n    axs.imshow(abs_vel, cmap='Reds', clim=(0, math.sqrt(2) * MAGNITUDE), origin='lower')\n\n    # style the plot\n    axs.get_xaxis().set_visible(False)\n    axs.get_yaxis().set_visible(False)\n    axs.set_aspect('equal')\n    axs.invert_yaxis()"
  },
  {
    "objectID": "posts/fluid_sim/index.html#vorticity-plot",
    "href": "posts/fluid_sim/index.html#vorticity-plot",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Vorticity Plot",
    "text": "Vorticity Plot\n\nfor _ in range(N_TIME_STEPS):\n    # use step function to get updated velocity and pressure\n    velocity, pressure = step(velocity, pressure)\n\n    # plot final figure\n    if _ == N_TIME_STEPS-1:\n      fig, axs = plt.subplots(1, 1, figsize=(5, 5))\n      \n      # populate figure\n      plot_vorticity(velocity, np.zeros((X_LEN, Y_LEN)), fig, axs, 0)\n      \n      # style the figure\n      plt.suptitle(f'Vorticity Simulation Results ({_+1} / {N_TIME_STEPS}) ')\n      plt.tight_layout()\n      plt.draw()\n      plt.pause(0.01)\n  \n      # clear image\n      plt.close()\n      \n    # otherwise pass\n    else:\n      pass"
  },
  {
    "objectID": "posts/fluid_sim/index.html#fluid-velocity-plot",
    "href": "posts/fluid_sim/index.html#fluid-velocity-plot",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Fluid Velocity Plot",
    "text": "Fluid Velocity Plot\n\nfor _ in range(N_TIME_STEPS):\n    # use step function to get updated velocity and pressure\n    velocity, pressure = step(velocity, pressure)\n\n    # plot final result\n    if _ == N_TIME_STEPS-1:\n      fig, axs = plt.subplots(1, 1, figsize=(5, 5))\n      \n      # populate figure\n      plot_velocity(velocity, np.zeros((X_LEN, Y_LEN)), fig, axs, 0)\n      \n      # style the figure\n      plt.suptitle(f'Absolute Velocity Simulation Results ({_+1} / {N_TIME_STEPS})')\n      plt.tight_layout()\n      plt.draw()\n      plt.pause(0.01)\n  \n      # clear image\n      plt.close()\n      \n    # otherwise pass\n    else:\n      pass"
  },
  {
    "objectID": "posts/fluid_sim/index.html#simulation-parameters",
    "href": "posts/fluid_sim/index.html#simulation-parameters",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Simulation Parameters",
    "text": "Simulation Parameters\nWhile each of these parameters may seem relatively self-explanatory, their implications are significant. Increasing the number of time steps or the size of the simulation domain, denoted as “X_LEN” and “Y_LEN,” will result in longer computation times. For the example case, I’ve kept these values relatively small to ensure manageable processing times. Another crucial parameter is the “DIFFUSION_CONSTANT,” which indirectly determines the rate at which velocity in a given cell disperses into its neighboring constituents. In this case, a higher value corresponds to a longer time for velocities to disperse across the system. Given that air is not very viscous and easily moves at low speeds, I’ve set the constant at 0.01.\n\n# set environment parameters\nN_TIME_STEPS = 150\nX_LEN = 300\nY_LEN = 100\n\n# set wind parameters\nMAGNITUDE = 0.1\nANGLE = 0 * np.pi\nDIFFUSION_CONSTANT = 0.01"
  },
  {
    "objectID": "posts/fluid_sim/index.html#adding-objects",
    "href": "posts/fluid_sim/index.html#adding-objects",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Adding Objects",
    "text": "Adding Objects\nThe PhiFlow simulation is capable of accepting a list of objects that define the coordinates of entities within the environment. These objects serve as reference points around which the simulation operates, and they also determine where boundary conditions are applied following advection and diffusion.\nFor the current case, I’ve created a list containing two “Obstacle” instances that I plan on experimenting with. The “Obstacle” class is a predefined component in PhiFlow, designed to seamlessly interact with boundary conditions. An added benefit of utilizing an “Obstacle” is its convenience in defining geometries such as boxes or cylinders. One can specify x and y coordinates, along with any additional parameters necessary to provide a minimal description of an objects position and geometry. In the future, I hope to expand on this concept to create more intricate object geometries. For now, I’ve defined two rectangles positioned approximately two-thirds of the way across the screen, creating a narrow passageway to the opposite side of the simulation.\nFurthermore, I’ve generated a boolean array consisting of ones and zeros, serving as a mask to determine where objects will appear in the final render. This step involves creating a large array of zeros with the same shape as the simulation grid and selectively setting portions of it to 1, corresponding to the position of the user-defined objects.\n\n# grid for object positions\nOBJECTS = [Obstacle(Box(x=(190, 200), y=(0, 40))), Obstacle(Box(x=(190, 200), y=(60, 100)))]\n\n# mask for displaying objects on plots\nOBJECTS_BOOL = np.zeros(shape=(Y_LEN, X_LEN))\nOBJECTS_BOOL[61:100, 191:200] = 1\nOBJECTS_BOOL[0:40, 191:200] = 1"
  },
  {
    "objectID": "posts/fluid_sim/index.html#step-function",
    "href": "posts/fluid_sim/index.html#step-function",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Step Function",
    "text": "Step Function\nThis is our stepping function that we will use to move from one period of time to another. We advect the system using a small dt and the rk4 integrator to get a new velocity field. In this case the semi-lagrangian is used instead of the typical laplacian to handel these boundary conditions. We would quickly run into an error along the objects if we advected normally. Thus we are looking specifically at particles that are not going to cross the boundries and advect those. Other particle velocities are set to 0. Next we apply the boundry conditions around the outside of the simulation. By multiplying the velocity by our boundry mask. Lastly we diffuse the velocities using the function “make_incompressible”. Again we input the velocites and objects so that we know where we can and cannot diffuse the velocities. We do this with a small diffusion constant which is part of the Solve() method.\n\n@jit_compile\ndef step(v, p, dt=1.0):\n    v = advect.semi_lagrangian(v, v, dt, integrator=rk4)\n    v = v * (1 - BOUNDARY_MASK) + BOUNDARY_MASK * (X_SPEED, Y_SPEED)\n    return fluid.make_incompressible(v, OBJECTS, Solve('auto', 1e-5, 0, x0=p))"
  },
  {
    "objectID": "posts/fluid_sim/index.html#plotting-functions",
    "href": "posts/fluid_sim/index.html#plotting-functions",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Plotting Functions",
    "text": "Plotting Functions\nNow it is important to actually visualize the simulation so I define two primary methods to accomplish this.\n\nVorticity\nThe following function is designed to visualize the vorticity of the fluid, which represents the curl of the vector field. Vorticity indicates the degree to which a field is inclined to rotate; thus, a point with high positive vorticity suggests that a hypothetical pinwheel placed at that location would rapidly spin in a counterclockwise direction.\nTo achieve this visualization, the function takes two essential arguments: the velocity field and the list of objects. It proceeds by directly computing the curl of the vector field and then generates a plot with a color bar, employing a meaningful color palette to illustrate the intricate flow patterns. Additionally, the function leverages the object array by filling the regions occupied by objects with a gray color to signify their presence.\nRunning this code on various snapshots in time results in an animation of the field’s evolution over time. This animation is the project’s ultimate goal and I find the visuals quite astonishing.\n\ndef plot_vorticity(v_field, objects):\n  \"\"\"Function to visualize vorticity\"\"\"\n  \n  # calculate vorticities\n  vorticity = field.curl(v_field)\n  vort_field = vorticity.values.numpy(\"y,x\")\n  \n  # populate plot\n  plt.imshow(vort_field, cmap='bwr', clim=(-3, 3), origin='lower')\n  cbar = plt.colorbar(shrink=0.7, location='bottom')\n  plt.imshow(objects, cmap='binary', alpha=0.5*(objects &gt; 0))\n  \n  # format plot\n  cbar.set_label('Vorticity (rad/s)')\n  plt.gca().set_aspect('equal')\n  plt.axis('off')\n  plt.gca().invert_yaxis()\n  plt.tight_layout()\n\n\n\nMagnitude\nWhile visualizing vorticity is a common approach in fluid dynamics, I also have a curiosity about the actual velocities experienced by particles within the field. Fortunately, this is relatively straightforward because the velocity field inherently encodes all this information. By extracting the x-velocity and y-velocity components, we only need to apply the Pythagorean theorem to derive a single representative quantity. I refer to this quantity as the “absolute velocity,” and it’s technically computed by summing the squared values of the two component velocities.\nOther than this calculation, the rest of the code remains the same, offering the same functionality as the previous function.\n\ndef plot_velocity(v_field, objects):\n  \"\"\"Function to visualize absolute velocity\"\"\"\n  \n  # calculate absolute velocities\n  cen_velocity = v_field.at_centers()\n  abs_vel = (cen_velocity[0].values.numpy('y,x') ** 2 + cen_velocity[1].values.numpy('y,x') ** 2) ** 0.5\n  \n  # populate plot\n  plt.imshow(abs_vel, cmap='Reds', clim=(0, 5), origin='lower')\n  cbar = plt.colorbar(shrink=0.7, location='bottom')\n  plt.imshow(objects, cmap='binary', alpha=0.5*(objects &gt; 0))\n  \n  # format plot\n  cbar.set_label('Velocity (m/s)')\n  plt.gca().set_aspect('equal')\n  plt.axis('off')\n  plt.gca().invert_yaxis()\n  plt.tight_layout()"
  },
  {
    "objectID": "posts/fluid_sim/index.html#fluid-vorticity",
    "href": "posts/fluid_sim/index.html#fluid-vorticity",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Fluid Vorticity",
    "text": "Fluid Vorticity\nCompiling all the data into frames and then generating an animation produces visually appealing results while also conserving space on the servers hosting the website. I accomplish this by harnessing a helpful Matplotlib function that enables the creation of an animation, which can be saved as a GIF and seamlessly integrated into the webpage layout. The chosen Matplotlib function requires a predefined update function responsible for generating the plot associated with a given frame number. This frame number conveniently corresponds to the index required to fetch the correct slice of velocity field data from the larger list.\n\ndef update(frame, velocity_data, objects):\n  \"\"\"Function to update vorticities for each time step\"\"\"\n  plt.clf()  # clear previous frame\n  velocity = velocity_data[frame]  # read in velocity data\n  plot = plot_vorticity(velocity, objects)  # generate new frame\n  return plot\n\n\n# prep figure\nfig, axs = plt.subplots(1, 1, figsize=(7, 7))\n\n# create animation and pass velocity/object data to plotter\ngif = FuncAnimation(fig, update, frames=N_TIME_STEPS, repeat=True, fargs=(velocity_data, OBJECTS_BOOL))\n\n# save animation\ngif.save('vorticity.gif', writer=\"pillow\", fps=10)\n\nPresented below is the resulting animation.\n\n\n\nGIF Of Vorticity Simulation Results"
  },
  {
    "objectID": "posts/fluid_sim/index.html#fluid-velocity",
    "href": "posts/fluid_sim/index.html#fluid-velocity",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Fluid Velocity",
    "text": "Fluid Velocity\nFollowing a very similar procedure, I now call the “plot_velocity” function to yielding the alternative visualization of absolute velocities for the same simulation.\n\ndef update(frame, velocity_data, objects):\n  \"\"\"Function to update absolute velocities for new time step\"\"\"\n  plt.clf()  # clear previous frame\n  velocity = velocity_data[frame]  # read in velocity data\n  plot = plot_velocity(velocity, objects)  # generate new frame\n  return plot\n\n\n# prep figure\nfig, axs = plt.subplots(1, 1, figsize=(7, 7))\n\n# create animation and pass velocity/object data to plotter\ngif = FuncAnimation(fig, update, frames=N_TIME_STEPS, repeat=True, fargs=(velocity_data, OBJECTS_BOOL))\n\n# save animation\ngif.save('velocity.gif', writer=\"pillow\", fps=10)\n\nAgain, featured below is the resulting GIF.\n\n\n\nGIF Of Absolute Velocity Simulation Results"
  },
  {
    "objectID": "posts/fluid_sim/index.html#simulation-domain",
    "href": "posts/fluid_sim/index.html#simulation-domain",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Simulation Domain",
    "text": "Simulation Domain\nI utilize the PhiFlow library to create a “StaggeredGrid” for storing the velocities at each discrete point within the simulation domain. These StaggeredGrids are tensors designed to store velocities on each face of the grid rather than at its centers. This configuration simplifies handling boundary conditions. Additionally, I set the extrapolation to “BOUNDARY,” enabling velocities to flow in and out of the simulation environment instead of being confined strictly within the domain. Within this staggered grid, the resolution is determined using “X_LEN” and “Y_LEN.”\nHowever, apart from defining the main environment, we also need to establish a separate wind grid that will impose its effects on the velocity grid. This approach streamlines future computations, especially when dealing with complex geometric objects that obstruct the flow. Within this wind grid, we create an inflow, serving as the source of our wind. By segregating this inflow from the other two grids, we gain better control over how it interacts with the environment. This includes adjusting parameters such as the inflow’s strength, duration, and shape. Since it will directly interact with the wind grid, I instantiate it with the same boundaries and resolution.\n\n# create simulation environment's velocity grid\nvelocity = StaggeredGrid(\n  values=(0, 0),\n  extrapolation=extrapolation.BOUNDARY,\n  x=X_LEN,\n  y=Y_LEN, \n  bounds=Box(x=X_LEN, y=Y_LEN)\n)\n\n# create wind container velocity grid                         \nwind = CenteredGrid(\n  values=(0.0, 0.0),\n  extrapolation=extrapolation.BOUNDARY,\n  x=X_LEN,\n  y=Y_LEN,\n  bounds=Box(x=X_LEN, y=Y_LEN)\n)\n\n# compute inflow velocity components\nX_SPEED = MAGNITUDE * math.cos(ANGLE)\nY_SPEED = MAGNITUDE * math.sin(ANGLE)\n\n# create inflow velocity grid\ninflow = (X_SPEED, Y_SPEED) * CenteredGrid(\n  values=SoftGeometryMask(\n    Sphere(\n      x=25,\n      y=50,\n      radius=10\n    )\n  ),\n  extrapolation=0.0,\n  bounds=wind.bounds,\n  resolution=wind.resolution\n)"
  },
  {
    "objectID": "posts/fluid_sim/index.html#time-stepping-function",
    "href": "posts/fluid_sim/index.html#time-stepping-function",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Time Stepping Function",
    "text": "Time Stepping Function\nThis next section holds paramount importance, as it defines the function responsible for computing changes in the velocity and pressure fields over small time increments. The general process involves advection and diffusion, enabling velocities to propagate in their respective directions while gradually dispersing their magnitudes across neighboring cells.\nGiven that I’ve created multiple separate grids, I compute their changes separately before combining them to obtain the final snapshot of the system at a given time. To begin, I initiate the process by advecting the wind grid and introducing additional velocity from the inflow. At this point in the loop, one could implement a time check, perhaps to reduce inflow velocity over time. However, for the sake of simplicity, I’ve left it unchanged. Following that, I diffuse the wind velocities based on the specified diffusion coefficient. In this case, I employ the “mac_cormack” method for advection due to its versatility, particularly with more turbulent fluids like gases.\nMoving forward, I introduce the wind velocities into the overall velocity grid. I achieve this by first advecting the current system so that it is at the same time instant as the wind velocities. Next, I resample the wind grid onto the velocity grid and simply add their vector components. This ensures alignment and precision in introducing velocities. For advection within the container velocity environment, I utilize the RK4 integrator, known for its precision in time stepping use cases. This integrator analyzes how the field changes in four sub-intervals over the total time difference and then computes a weighted average of these results. This ultimately yields a smoother and more accurate transition from the first to the second time period. RK4 is widely employed for solving differential equations, a subset of which are related to fluid dynamics. In this context, we employ the “semi_lagrangian” method, known for its versatility and overall effectiveness as an advection routine for general fluids.\nLastly, the velocities undergo an adjustment through the “make_incompressible” function. This function takes in the velocities and the list of objects to determine where pressure adjustments are needed and where they should be disregarded. The purpose of adjusting pressures is to incorporate object information into the simulation. By eliminating the regions that objects occupy, the pressure on specific cells increases, compelling them to exert force on feasible neighboring cells. This phenomenon creates the bouncing effect and forces the fluid to flow around obstacles. Furthermore, at low velocities, wind behaves incompressibly, contributing to a more accurate model.\n\n@jit_compile\ndef step(v, w, dt=1.0):\n  w = advect.mac_cormack(w, v, dt) + inflow  # advect wind\n  w_next = diffuse.implicit(w, DIFFUSION_CONSTANT, dt)  # diffuse wind\n  v = advect.semi_lagrangian(v, v, dt, integrator=rk4) + (w_next @ v) * dt  # advect velocity field and add wind\n  v_next, p_next = fluid.make_incompressible(v, OBJECTS, Solve('auto', 1e-5, 0, x0=None))  # adjust resulting pressures\n  return v_next, w_next"
  },
  {
    "objectID": "posts/fluid_sim/index.html#importing-libraries",
    "href": "posts/fluid_sim/index.html#importing-libraries",
    "title": "Fluid Simulations With PhiFlow",
    "section": "Importing Libraries",
    "text": "Importing Libraries\nSurprisingly, the code requires only a few libraries to be installed to get started and experiment with it on your own. While each of these libraries downloads a range of version-specific additional packages for actual execution, the setup process is relatively painless.\n\n# imports for physics\nfrom phi.physics.advect import rk4  # pre-existing rk4 ode solver\nfrom phi.jax.flow import *  # faster implementation of numpy\n\n# imports for visualizations\nfrom matplotlib.animation import FuncAnimation\nimport matplotlib.pyplot as plt"
  }
]